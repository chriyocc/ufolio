{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js", "../../@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/BaseSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/VideoSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/ImageSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontWeight.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontStyle.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textDecoration.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/serializeCloudinaryCharacters.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStroke.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IStrokeModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js", "../../@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js", "../../@cloudinary/transformation-builder-sdk/internal/Action.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/BaseTextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/SubtitlesSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/base64Encode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/FetchSource.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createTextStyleFromModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/TextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/AudioSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source.js"],
  "sourcesContent": ["class UnsupportedError extends Error {\n    constructor(message = 'Unsupported') {\n        super(message);\n    }\n}\n/**\n * Creates a new UnsupportedError\n * @param message\n */\nfunction createUnsupportedError(message) {\n    return new UnsupportedError(message);\n}\nexport { UnsupportedError, createUnsupportedError };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function qualifierToJson() {\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\n}\n", "import { qualifierToJson } from \"./qualifierToJson.js\";\nexport class QualifierModel {\n    constructor() {\n        this._qualifierModel = {};\n    }\n    toJson() {\n        return qualifierToJson.apply(this);\n    }\n}\n", "import { QualifierModel } from \"../../internal/models/QualifierModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {QualifierModel}\n * @description An abstract class extended by all Source objects\n */\nclass BaseSource extends QualifierModel {\n    /**\n     * @description Utility function to encode an asset publicID in an overlay\n     * @protected\n     * @example\n     * encodeAssetPublicID('foo/bar'); // -> foo:bar\n     */\n    encodeAssetPublicID(publicID) {\n        return publicID.replace(/\\//g, ':');\n    }\n    /**\n     * @description\n     * Apply a transformation on the image source of the layer\n     * @param {SDK.ImageTransformation} t An image transformation to apply to the layer\n     * @returns {this}\n     */\n    transformation(t) {\n        this._qualifierModel.transformation = t.toJson();\n        this._transformation = t;\n        return this;\n    }\n    /**\n     * @description Returns the Transformation of the source\n     * @return {SDK.Transformation}\n     */\n    getTransformation() {\n        return this._transformation;\n    }\n}\nexport { BaseSource };\n", "import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'video'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        return `${layerType}_video:${encodedPublicID}`;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { VideoSource };\n", "import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'image'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        if (this._format) {\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_${encodedPublicID}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n    toJson() {\n        const result = super.toJson();\n        if (result.publicId && this._format) {\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\n        }\n        return result;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { ImageSource };\n", "/**\n * @description Contains functions to select the font weight.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontWeight\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction thin() {\n    return 'thin';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction light() {\n    return 'light';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction bold() {\n    return 'bold';\n}\nconst FontWeight = { bold, light, normal, thin };\nexport { FontWeight, bold, light, normal, thin };\n", "/**\n * @description Contains functions to select the style of the text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontStyle\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction italic() {\n    return 'italic';\n}\nconst FontStyle = { normal, italic };\nexport { FontStyle, italic, normal };\n", "/**\n * @description Contains functions to select the text decoration to be used with text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextDecoration\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction normal() {\n    return '';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction underline() {\n    return 'underline';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction strikethrough() {\n    return 'strikethrough';\n}\nconst TextDecoration = { normal, underline, strikethrough };\nexport { TextDecoration, normal, underline, strikethrough };\n", "/**\n *\n * @description - Replace (,) and (/) in a string to its URL encoded equivalence\n * @param {string} str\n * @private\n */\nfunction serializeCloudinaryCharacters(str = '') {\n    return str\n        .replace(/,/g, '%2C')\n        .replace(/\\//g, '%2F');\n}\nexport { serializeCloudinaryCharacters };\n", "/**\n * @description Contains function to set the outline stroke.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextAlignment\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier Adding a Border-like qualifier to the same action.\n * @memberOf Qualifiers.Stroke\n * @param {number|string|ExpressionQualifier} width The width in pixels.\n * @param {number|string|SystemColors} color The color of the border.\n */\nfunction solid(width, color) {\n    return `bo_${width}px_solid_${color}`;\n}\nconst Stroke = { solid };\nexport { Stroke, solid };\n", "/**\n * Validate that obj is an ISolidStrokeModel\n * @param obj\n */\nexport function isISolidStrokeModel(obj) {\n    return typeof obj === 'object' && obj.width != null && obj.color != null;\n}\n", "import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n    /**\n     * @param {string} fontFamily The font family\n     * @param {number | string} fontSize The font size\n     */\n    constructor(fontFamily, fontSize) {\n        super();\n        if (!fontFamily || !fontSize) {\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\n        }\n        this._qualifierModel.fontFamily = fontFamily;\n        this._qualifierModel.fontSize = fontSize;\n    }\n    /**\n     * @param {number} spacing The spacing between multiple lines in pixels.\n     */\n    lineSpacing(spacing) {\n        this._qualifierModel.lineSpacing = spacing;\n        return this;\n    }\n    /**\n     * @param spacing The spacing between the letters, in pixels.\n     */\n    letterSpacing(spacing) {\n        this._qualifierModel.letterSpacing = spacing;\n        return this;\n    }\n    /**\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n     * @param {FontAntialiasType|string} antiAlias\n     */\n    fontAntialias(antiAlias) {\n        this._qualifierModel.fontAntialias = antiAlias;\n        return this;\n    }\n    /**\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n     * @param {string} fontFamilyName\n     */\n    fontFamily(fontFamilyName) {\n        this._qualifierModel.fontFamily = fontFamilyName;\n        return this;\n    }\n    /**\n     * @param {number} fontSize The font size\n     */\n    fontSize(fontSize) {\n        this._qualifierModel.fontSize = fontSize;\n        return this;\n    }\n    /**\n     * @param {FontWeightType|string} fontWeight The font weight\n     */\n    fontWeight(fontWeight) {\n        this._qualifierModel.fontWeight = fontWeight;\n        return this;\n    }\n    /**\n     *\n     * @param {string} fontStyle The font style.\n     */\n    fontStyle(fontStyle) {\n        this._qualifierModel.fontStyle = fontStyle;\n        return this;\n    }\n    /**\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n     */\n    fontHinting(fontHinting) {\n        this._qualifierModel.fontHinting = fontHinting;\n        return this;\n    }\n    /**\n     *\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\n     */\n    textDecoration(textDecoration) {\n        this._qualifierModel.textDecoration = textDecoration;\n        return this;\n    }\n    /**\n     * @param {TextAlignmentType|string} textAlignment The text alignment\n     */\n    textAlignment(textAlignment) {\n        this._qualifierModel.textAlignment = textAlignment;\n        return this;\n    }\n    /**\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\n     */\n    stroke(textStroke) {\n        if (textStroke) {\n            const strokeStyle = textStroke.split('_');\n            this._qualifierModel.stroke = {\n                width: +(strokeStyle[1].replace('px', '')),\n                color: strokeStyle[strokeStyle.length - 1]\n            };\n        }\n        else {\n            this._qualifierModel.stroke = true;\n        }\n        return this;\n    }\n    toString() {\n        const { stroke } = this._qualifierModel;\n        let strokeStr = '';\n        if (stroke) {\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n        }\n        return [\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\n            this._qualifierModel.textAlignment,\n            strokeStr,\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\n        ].filter((a) => a).join('_');\n    }\n}\nexport { TextStyle };\n", "/**\n * @summary SDK\n * @memberOf SDK\n */\nclass QualifierValue {\n    /**\n     *\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\n     */\n    constructor(qualifierValue) {\n        this.values = [];\n        this.delimiter = ':'; // {value}{delimiter}{value}...\n        if (this.hasValue(qualifierValue)) {\n            this.addValue(qualifierValue);\n        }\n    }\n    /**\n     * @description Joins the provided values with the provided delimiter\n     */\n    toString() {\n        return this.values.join(this.delimiter);\n    }\n    /**\n     * @description Checks if the provided argument has a value\n     * @param {any} v\n     * @private\n     * @return {boolean}\n     */\n    hasValue(v) {\n        return typeof v !== 'undefined' && v !== null && v !== '';\n    }\n    /**\n     * @desc Adds a value for the this qualifier instance\n     * @param {any} value\n     * @return {this}\n     */\n    addValue(value) {\n        // Append value or array of values\n        if (Array.isArray(value)) {\n            this.values = this.values.concat(value);\n        }\n        else {\n            this.values.push(value);\n        }\n        // Remove falsy values\n        this.values = this.values.filter((v) => this.hasValue(v));\n        return this;\n    }\n    /**\n     * @description Sets the delimiter for this instance\n     * @param delimiter\n     */\n    setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n        return this;\n    }\n}\nexport { QualifierValue };\n", "import { QualifierValue } from './QualifierValue.js';\nimport { QualifierModel } from '../models/QualifierModel.js';\n/**\n * @summary SDK\n * @memberOf SDK\n */\nclass Qualifier extends QualifierModel {\n    constructor(key, qualifierValue) {\n        super();\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\n        this.key = key;\n        if (qualifierValue instanceof QualifierValue) {\n            this.qualifierValue = qualifierValue;\n        }\n        else {\n            this.qualifierValue = new QualifierValue();\n            this.qualifierValue.addValue(qualifierValue);\n        }\n    }\n    toString() {\n        const { key, delimiter, qualifierValue } = this;\n        return `${key}${delimiter}${qualifierValue.toString()}`;\n    }\n    addValue(value) {\n        this.qualifierValue.addValue(value);\n        return this;\n    }\n}\nexport { Qualifier };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\nclass FlagQualifier extends Qualifier {\n    constructor(flagType, flagValue) {\n        let qualifierValue;\n        if (flagValue) {\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = flagType;\n        }\n        super('fl', qualifierValue);\n        this.flagValue = flagValue;\n    }\n    toString() {\n        return super.toString().replace(/\\./g, '%2E');\n    }\n    getFlagValue() {\n        return this.flagValue;\n    }\n}\nexport { FlagQualifier };\n", "/**\n * Sort a map by key\n * @private\n * @param map <string, any>\n * @Return array of map's values sorted by key\n */\nfunction mapToSortedArray(map, flags) {\n    const array = Array.from(map.entries());\n    // objects from the Array.from() method above are stored in array of arrays:\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\n    // Flags is an array of FlagQualifierObj\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\n    flags.forEach((flag) => {\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\n    });\n    return array.sort().map((v) => v[1]);\n}\n/**\n * Checks if `value` is a string.\n * @private\n * @param {*} value The value to check.\n * @return {boolean} `true` if `value` is a string, else `false`.\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\nexport { isString, mapToSortedArray };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function actionToJson() {\n    var _a, _b, _c;\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\n    // Should return error when there is unsupported transformation inside\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\n        return { error: sourceTransformationError };\n    }\n    if (actionModelIsNotEmpty) {\n        return this._actionModel;\n    }\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n}\n", "import { actionToJson } from \"./actionToJson.js\";\nexport class ActionModel {\n    constructor() {\n        this._actionModel = {};\n    }\n    toJson() {\n        return actionToJson.apply(this);\n    }\n}\n", "import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n", "/**\n * Returns RGB or Color\n * @private\n * @param color\n */\nexport function prepareColor(color) {\n    if (color) {\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\n    }\n    else {\n        return color;\n    }\n}\n", "import { BaseSource } from \"../BaseSource.js\";\nimport { TextStyle } from \"../../textStyle.js\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n        this._qualifierModel.sourceType = 'text';\n        this._qualifierModel.text = text;\n        if (textStyle instanceof TextStyle) {\n            this._qualifierModel.textStyle = textStyle.toJson();\n        }\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        this._qualifierModel.textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        this._qualifierModel.backgroundColor = bgColor;\n        return this;\n    }\n    textFit(textFit) {\n        this._textFit = textFit;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        this._textFit && tmpAction.addQualifier(this._textFit);\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n        this._qualifierModel = {\n            sourceType: 'subtitles',\n            publicId: fileName\n        };\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        this._qualifierModel.textStyle = textStyle.toJson();\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.Format\n * @extends {SDK.QualifierValue}\n */\nclass FormatQualifier extends QualifierValue {\n    constructor(val) {\n        super(val);\n        this.val = val;\n    }\n    getValue() {\n        return this.val;\n    }\n}\nexport { FormatQualifier };\n", "/**\n *\n * @private\n * @description An isomorphic Base64 function, provides browser and server support.\n * @param {string} input - A string to encode with base64\n */\nfunction base64Encode(input) {\n    // Browser\n    let encodedResult = '';\n    if (typeof window !== 'undefined') {\n        // encodeURI the input to support unicode characters\n        // Since the URI might be encoded already, we try to decode it once before\n        encodedResult = btoa(encodeURI(decodeURI(input)));\n    }\n    else {\n        // NodeJS support\n        encodedResult = global.Buffer.from(input).toString('base64');\n    }\n    return encodedResult\n        .replace(/\\+/g, '-') // Convert '+' to '-'\n        .replace(/\\//g, '_'); // Convert '/' to '_';\n}\nexport { base64Encode };\n", "import { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._qualifierModel = {\n            sourceType: 'fetch',\n            url: remoteURL\n        };\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._qualifierModel.format = format.toString();\n        this._format = format;\n        return this;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { url, transformation, format } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(url);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (format) {\n            result.format(new FormatQualifier(format));\n        }\n        return result;\n    }\n}\nexport { FetchSource };\n", "import { TextStyle } from \"../../qualifiers/textStyle.js\";\nimport { solid } from \"../../qualifiers/textStroke.js\";\n/**\n * Create TextStyle from ITextStyleModel\n * @param textStyleModel\n */\nexport function createTextStyleFromModel(textStyleModel) {\n    const { fontFamily, fontSize, fontWeight, fontStyle, fontAntialias, fontHinting, textDecoration, textAlignment, stroke, letterSpacing, lineSpacing, } = textStyleModel;\n    const result = new TextStyle(fontFamily, fontSize);\n    if (fontWeight) {\n        result.fontWeight(fontWeight);\n    }\n    if (fontStyle) {\n        result.fontStyle(fontStyle);\n    }\n    if (fontAntialias) {\n        result.fontAntialias(fontAntialias);\n    }\n    if (fontHinting) {\n        result.fontHinting(fontHinting);\n    }\n    if (textDecoration) {\n        result.textDecoration(textDecoration);\n    }\n    if (textAlignment) {\n        result.textAlignment(textAlignment);\n    }\n    if (stroke) {\n        result.stroke();\n        if (typeof stroke !== \"boolean\") {\n            result.stroke(solid(stroke.width, stroke.color));\n        }\n    }\n    if (letterSpacing) {\n        result.letterSpacing(letterSpacing);\n    }\n    if (lineSpacing) {\n        result.lineSpacing(lineSpacing);\n    }\n    return result;\n}\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\nimport { createTextStyleFromModel } from \"../../../internal/models/createTextStyleFromModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseTextSource}\n * @description Defines how to manipulate a text layer\n */\nclass TextSource extends BaseTextSource {\n    constructor(fileName, textStyle) {\n        /* istanbul ignore next */\n        super(fileName, textStyle);\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { text, textStyle, textColor, backgroundColor, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(text, textStyle ? createTextStyleFromModel(textStyle) : undefined);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (textColor) {\n            result.textColor(textColor);\n        }\n        if (backgroundColor) {\n            result.backgroundColor(backgroundColor);\n        }\n        return result;\n    }\n}\nexport { TextSource };\n", "import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.AudioSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass AudioSource extends BaseSource {\n    constructor(publicId) {\n        super();\n        this._qualifierModel = {\n            sourceType: 'audio',\n            publicId\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._qualifierModel.publicId);\n        return `${layerType}_audio:${encodedPublicID}`;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { AudioSource };\n", "import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\nimport { AudioSource } from \"./source/sourceTypes/AudioSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n    return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n    return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n    return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a AudioSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the audio to be used as a layer\n * @return {Qualifiers.Source.AudioSource}\n */\nfunction audio(publicID) {\n    return new AudioSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n    return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n    return new FetchSource(remoteURL);\n}\nconst Source = { image, text, video, subtitles, fetch, audio };\nexport { Source, image, text, video, subtitles, fetch, audio };\n"],
  "mappings": "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",
  "names": ["normal", "normal", "normal", "text", "text", "text", "text"]
}
